<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThreeLib</name>
    </assembly>
    <members>
        <member name="T:THREE.Cameras.Camera">
            <summary>
            Abstract base class for cameras. This class should always be inherited when you build a new camera. 
            Analogous to: https://threejs.org/docs/index.html#api/cameras/Camera
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/cameras/Camera.js
            </summary>
        </member>
        <member name="T:THREE.Cameras.OrthographicCamera">
            <summary>
            Camera that uses orthographic projection.
            In this projection mode, an object's size in the rendered image stays constant regardless of its distance from the camera.
            This can be useful for rendering 2D scenes and UI elements, amongst other things.
            Analogous to: https://threejs.org/docs/index.html#api/cameras/OrthographicCamera
            JS Source: https://github.com/mrdoob/three.js/blob/master/src/cameras/OrthographicCamera.js
            </summary>
        </member>
        <member name="P:THREE.Cameras.OrthographicCamera.Bottom">
            <summary>
            Camera frustum bottom plane.
            </summary>
        </member>
        <member name="P:THREE.Cameras.OrthographicCamera.Far">
            <summary>
            Camera frustum far plane. 
            The valid range is between the current value of the near plane and infinity.
            </summary>
        </member>
        <member name="P:THREE.Cameras.OrthographicCamera.Left">
            <summary>
            Camera frustum left plane.
            </summary>
        </member>
        <member name="P:THREE.Cameras.OrthographicCamera.Near">
            <summary>
            Camera frustum near plane.
            The valid range is between 0 and the current value of the far plane.Note that, unlike for the PerspectiveCamera, 0 is a valid value for an OrthographicCamera's near plane. 
            </summary>
        </member>
        <member name="P:THREE.Cameras.OrthographicCamera.Right">
            <summary>
            Camera frustum right plane.
            </summary>
        </member>
        <member name="P:THREE.Cameras.OrthographicCamera.Top">
            <summary>
            Camera frustum top plane.
            </summary>
        </member>
        <member name="P:THREE.Cameras.OrthographicCamera.Zoom">
            <summary>
            Gets or sets the zoom factor of the camera.
            </summary>
        </member>
        <member name="M:THREE.Cameras.OrthographicCamera.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:THREE.Cameras.PerspectiveCamera">
            <summary>
            Camera that uses perspective projection.
            This projection mode is designed to mimic the way the human eye sees.It is the most common projection mode used for rendering a 3D scene.
            Analogous to : https://threejs.org/docs/index.html#api/cameras/PerspectiveCamera
            JS Source: https://github.com/mrdoob/three.js/blob/master/src/cameras/PerspectiveCamera.js
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.Aspect">
            <summary>
            Camera frustum aspect ratio, usually the canvas width / canvas height.
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.Far">
            <summary>
            Camera frustum far plane. 
            The valid range is between the current value of the near plane and infinity.
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.FilmGauge">
            <summary>
            Film size used for the larger axis. Default is 35 (millimeters). This parameter does not influence the projection matrix unless .filmOffset is set to a nonzero value.
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.FilmOffset">
            <summary>
            Horizontal off-center offset in the same unit as FilmGauge.
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.Focus">
            <summary>
            Object distance used for stereoscopy and depth-of-field effects. This parameter does not influence the projection matrix unless a StereoCamera is being used.
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.Fov">
            <summary>
            Camera frustum vertical field of view, from bottom to top of view, in degrees.
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.Near">
            <summary>
            Camera frustum near plane.
            The valid range is greater than 0 and less than the current value of the far plane.
            Note that, unlike for the OrthographicCamera, 0 is not a valid value for a PerspectiveCamera's near plane. 
            </summary>
        </member>
        <member name="P:THREE.Cameras.PerspectiveCamera.Zoom">
            <summary>
            Gets or sets the zoom factor of the camera.
            </summary>
        </member>
        <member name="M:THREE.Cameras.PerspectiveCamera.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:THREE.Core.BufferGeometry.BoundingSphere">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.BufferGeometry.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:THREE.Core.BufferGeometry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:THREE.Core.BufferGeometryBoundingSphere">
            <summary>
            Data for the bounding sphere.
            </summary>
        </member>
        <member name="P:THREE.Core.BufferGeometryBoundingSphere.Center">
            <summary>
            Center position of the bounding sphere.
            </summary>
        </member>
        <member name="P:THREE.Core.BufferGeometryBoundingSphere.Radius">
            <summary>
            Radius of the bounding sphere.
            </summary>
        </member>
        <member name="T:THREE.Core.Element">
            <summary>
            Base class for objects which have a Uuid, Name, and Type.
            </summary>
        </member>
        <member name="P:THREE.Core.Element.Uuid">
            <summary>
            Unique Guid.
            </summary>
        </member>
        <member name="P:THREE.Core.Element.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:THREE.Core.Element.Type">
            <summary>
            Type of object.
            </summary>
        </member>
        <member name="M:THREE.Core.Element.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:THREE.Core.Element.SetUuid(System.Guid)">
            <summary>
            
            </summary>
            <param name="uuid"></param>
        </member>
        <member name="T:THREE.Core.IGeometry">
            <summary>
            
            </summary>
        </member>
        <member name="T:THREE.Core.Geometry">
            <summary>
            Base class for all geometries. 
            Analogous to https://threejs.org/docs/index.html#api/core/Geometry
            Design based on need for Three.js Loaders.
            </summary>
        </member>
        <member name="P:THREE.Core.Geometry.Data">
            <summary>
            Geometry data.
            </summary>
        </member>
        <member name="P:THREE.Core.Geometry.Vertices">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.Geometry.Colors">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.Geometry.Faces">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.Geometry.Normals">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.Geometry.Uvs">
            <summary>
            The list of UVs associated with this geometry.
            </summary>
        </member>
        <member name="M:THREE.Core.Geometry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:THREE.Core.Geometry.#ctor(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Collections.Generic.List{System.Single}})">
            <summary>
            Constructor with default values = null.
            </summary>
            <param name="vertices"></param>
            <param name="faces"></param>
            <param name="normals"></param>
            <param name="colors"></param>
            <param name="uvs"></param>
        </member>
        <member name="M:THREE.Core.Geometry.ProcessFaceArray(System.Collections.Generic.List{System.Int32[]},System.Boolean,System.Boolean)">
            <summary>
            Utility method for processing faces.
            TODO: Extend for all types of faces and switches.
            </summary>
            <param name="faces"></param>
            <param name="vertexColors"></param>
            <param name="uvs"></param>
            <returns>A list of int.</returns>
        </member>
        <member name="M:THREE.Core.Geometry.ProcessVertexArray(System.Collections.Generic.List{System.Single[]})">
            <summary>
            
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:THREE.Core.Geometry.ProcessNormalArray(System.Collections.Generic.List{System.Single[]})">
            <summary>
            
            </summary>
            <param name="normals"></param>
            <returns></returns>
        </member>
        <member name="M:THREE.Core.Geometry.Equals(THREE.Core.Geometry)">
            <summary>
            Check if one Geometry equals another.
            TODO: Check if base.Equals(other)? Object3D would need to be IEquatable.
            </summary>
            <param name="other">The other object to check.</param>
            <returns></returns>
        </member>
        <member name="P:THREE.Core.GeometrySerializationAdaptor.Data">
            <summary>
            Geometry data.
            </summary>
        </member>
        <member name="T:THREE.Core.GeometryData">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryData.Vertices">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryData.Colors">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryData.Faces">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryData.Uvs">
            <summary>
            The list of UVs associated with this geometry.
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryData.Normals">
            <summary>
            The list of normals associated with this geometry.
            </summary>
        </member>
        <member name="T:THREE.Core.GeometryFace">
            <summary>
            Class for storing geometry face data.
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.Topology">
            <summary>
            False for triangle, true for quad.
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.FaceMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.FaceUVs">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.FaceVertexUVs">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.FaceNormals">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.VertexNormals">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.FaceColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Core.GeometryFace.VertexColors">
            <summary>
            
            </summary>
        </member>
        <member name="M:THREE.Core.GeometryFace.GetFaceType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:THREE.Core.GeometryCollection.AddIfNew(THREE.Core.Geometry)">
            <summary>
            Add a geometry to this collection if it does not already exist.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:THREE.Core.Object3D">
            <summary>
            Base class for all objects. Analogous to https://threejs.org/docs/index.html#api/core/Object3D
            </summary>
        </member>
        <member name="P:THREE.Core.Object3D.Visible">
            <summary>
            Object visibility.
            </summary>
        </member>
        <member name="P:THREE.Core.Object3D.CastShadow">
            <summary>
            Flag for determining if object casts shadow.
            </summary>
        </member>
        <member name="P:THREE.Core.Object3D.ReceiveShadow">
            <summary>
            Flag for determining if object receives shadow.
            </summary>
        </member>
        <member name="P:THREE.Core.Object3D.Children">
            <summary>
            List with object's children.
            </summary>
        </member>
        <member name="P:THREE.Core.Object3D.UserData">
            <summary>
            Object user data.
            </summary>
        </member>
        <member name="P:THREE.Core.Object3D.Matrix">
            <summary>
            Object matrix.
            </summary>
        </member>
        <member name="P:THREE.Core.Object3D.Position">
            <summary>
            The object's local position.
            </summary>
        </member>
        <member name="M:THREE.Core.Object3D.#ctor">
            <summary>
            Default constructor. Results in an empty Object3D with new Uuid.
            </summary>
        </member>
        <member name="M:THREE.Core.Object3D.ShouldSerializeChildren">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:THREE.Core.Object3D.Add(THREE.Core.IElement)">
            <summary>
            Adds an object as a child of this object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:THREE.Core.Object3D.AddRange(System.Collections.Generic.List{THREE.Core.IElement})">
            <summary>
            Adds a list of objects as children of this object.
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:THREE.Core.Object3D.ToJSON(System.Boolean)">
            <summary>
            Convert the object to JSON format. 
            </summary>
            <returns>A string representation of this object, serialized to JSON.</returns>
            <summary>
            Converts this Scene to a compatible JSON format.
            </summary>
            <returns>JSON String.</returns>
        </member>
        <member name="M:THREE.Core.Object3DSerializationAdaptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:THREE.Geometries.SphereGeometry">
            <summary>
            A class for generating sphere geometries.
            Analagous to: https://threejs.org/docs/index.html#api/geometries/SphereGeometry
            JS Source: https://github.com/mrdoob/three.js/blob/master/src/geometries/SphereGeometry.js
            </summary>
        </member>
        <member name="P:THREE.Geometries.SphereGeometry.Radius">
            <summary>
            Sphere radius.
            </summary>
        </member>
        <member name="P:THREE.Geometries.SphereGeometry.WidthSegments">
            <summary>
             Number of horizontal segments. Minimum value is 3.
            </summary>
        </member>
        <member name="P:THREE.Geometries.SphereGeometry.HeightSegments">
            <summary>
            Number of vertical segments. Minimum value is 2.
            </summary>
        </member>
        <member name="P:THREE.Geometries.SphereGeometry.PhiStart">
            <summary>
            Specify horizontal starting angle (in radians).
            </summary>
        </member>
        <member name="P:THREE.Geometries.SphereGeometry.PhiLength">
            <summary>
            Specify horizontal sweep angle size (in radians).
            </summary>
        </member>
        <member name="P:THREE.Geometries.SphereGeometry.ThetaStart">
            <summary>
            Specify horizontal sweep angle size (in radians).
            </summary>
        </member>
        <member name="P:THREE.Geometries.SphereGeometry.ThetaLength">
            <summary>
            Specify vertical sweep angle size (in radians).
            </summary>
        </member>
        <member name="M:THREE.Geometries.SphereGeometry.Equals(THREE.Geometries.SphereGeometry)">
            <summary>
            Check if this is equal to another geometry of this type.
            </summary>
            <param name="other">Other geometry.</param>
            <returns>True if the geometries contain the same property values. False if otherwise.</returns>
        </member>
        <member name="T:THREE.Lights.AmbientLight">
            <summary>
            This light globally illuminates all objects in the scene equally.
            Analogous to: https://threejs.org/docs/index.html#api/lights/AmbientLight
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/AmbientLight.js
            </summary>
        </member>
        <member name="T:THREE.Lights.DirectionalLight">
            <summary>
            A light that gets emitted in a specific direction.
            Analogous to: https://threejs.org/docs/index.html#api/lights/DirectionalLight
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLight.js
            </summary>
        </member>
        <member name="P:THREE.Lights.DirectionalLight.Shadow">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Lights.DirectionalLight.Target">
            <summary>
            The Spotlight points from its position to target.position.
            </summary>
        </member>
        <member name="T:THREE.Lights.DirectionalLightShadow">
            <summary>
            Analogous to: https://threejs.org/docs/index.html#api/lights/shadows/DirectionalLightShadow
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLightShadow.js
            </summary>
        </member>
        <member name="P:THREE.Lights.DirectionalLightShadow.Camera">
            <summary>
            
            </summary>
        </member>
        <member name="T:THREE.Lights.HemisphereLight">
            <summary>
            A light source positioned directly above the scene, with color fading from the sky color to the ground color.
            This light cannot be used to cast shadows.
            Analogous to: https://threejs.org/docs/index.html#api/lights/HemisphereLight
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/HemisphereLight.js
            </summary>
        </member>
        <member name="P:THREE.Lights.HemisphereLight.GroundColor">
            <summary>
            Color of the ground.
            </summary>
        </member>
        <member name="P:THREE.Lights.HemisphereLight.SkyColor">
            <summary>
            Color of the sky.
            </summary>
        </member>
        <member name="T:THREE.Lights.ILight">
            <summary>
            Base interface for light objects.
            </summary>
        </member>
        <member name="T:THREE.Lights.Light">
            <summary>
            Abstract base class for lights - all other light types inherit the properties and methods described here.
            Analogous to: https://threejs.org/docs/index.html#api/lights/Light
            Original source: https://github.com/mrdoob/three.js/blob/master/src/lights/Light.js
            </summary>
        </member>
        <member name="P:THREE.Lights.Light.Color">
            <summary>
            Light color.
            </summary>
        </member>
        <member name="P:THREE.Lights.Light.Intensity">
            <summary>
            Light intensity.
            </summary>
        </member>
        <member name="T:THREE.Lights.LightShadow">
            <summary>
            
            Analogous to: https://threejs.org/docs/index.html#api/lights/shadows/LightShadow
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/LightShadow.js
            </summary>
        </member>
        <member name="P:THREE.Lights.LightShadow.Camera">
            <summary>
            The light's view of the world.
            </summary>
        </member>
        <member name="P:THREE.Lights.LightShadow.Bias">
            <summary>
            Shadow map bias, how much to add or subtract from the normalized depth when deciding whether a surface is in shadow.
            </summary>
        </member>
        <member name="P:THREE.Lights.LightShadow.Radius">
            <summary>
            Setting this to values greater than 1 will blur the edges of the shadow.
            </summary>
        </member>
        <member name="T:THREE.Lights.PointLight">
            <summary>
            A light that gets emitted from a single point in all directions. A common use case for this is to replicate the light emitted from a bare lightbulb.
            Analogous to: https://threejs.org/docs/index.html#api/lights/PointLight
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/PointLight.js
            </summary>
        </member>
        <member name="P:THREE.Lights.PointLight.Distance">
            <summary>
            Light distance.
            </summary>
        </member>
        <member name="P:THREE.Lights.PointLight.Decay">
            <summary>
            Light decay.
            </summary>
        </member>
        <member name="T:THREE.Lights.RectAreaLight">
            <summary>
            This light gets emitted uniformly across the face a rectangular plane. This can be used to simulate things like bright windows or strip lighting.
            Analogous to: https://threejs.org/docs/index.html#api/lights/RectAreaLight
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/RectAreaLight.js
            </summary>
        </member>
        <member name="P:THREE.Lights.RectAreaLight.Height">
            <summary>
            Height of the light.
            </summary>
        </member>
        <member name="P:THREE.Lights.RectAreaLight.Width">
            <summary>
            Width of the light.
            </summary>
        </member>
        <member name="T:THREE.Lights.SpotLight">
            <summary>
            his light gets emitted from a single point in one direction, along a cone that increases in size the further from the light it gets.
            Analogous to: https://threejs.org/docs/index.html#api/lights/SpotLight
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/SpotLight.js
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLight.Angle">
            <summary>
            Maximum extent of the spotlight, in radians, from its direction. Should be no more than Math.PI/2. The default is Math.PI/3. 
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLight.Distance">
            <summary>
            If non-zero, light will attenuate linearly from maximum intensity at the light's position down to zero at this distance from the light.
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLight.Decay">
            <summary>
            The amount the light dims along the distance of the light.
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLight.Penumbra">
            <summary>
            Percent of the spotlight cone that is attenuated due to penumbra. Takes values between zero and 1.
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLight.Power">
            <summary>
            The light's power.
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLight.Target">
            <summary>
            The Spotlight points from its position to target.position.
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLight.Shadow">
            <summary>
            
            </summary>
        </member>
        <member name="T:THREE.Lights.SpotLightShadow">
            <summary>
            
            Analogous to: https://github.com/mrdoob/three.js/blob/master/src/lights/SpotLightShadow.js
            Original Source: https://github.com/mrdoob/three.js/blob/master/src/lights/SpotLightShadow.js
            </summary>
        </member>
        <member name="P:THREE.Lights.SpotLightShadow.Camera">
            <summary>
            
            </summary>
        </member>
        <member name="T:THREE.Materials.LineBasicMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.LineBasicMaterial.Color">
            <summary>
            The material color.
            </summary>
        </member>
        <member name="P:THREE.Materials.LineBasicMaterial.LineWidth">
            <summary>
            The curve linewidth.
            </summary>
        </member>
        <member name="P:THREE.Materials.LineBasicMaterial.LineCap">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.LineBasicMaterial.LineJoin">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.AoMap">
            <summary>
            Material ao map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.AoMapUuid">
            <summary>
            ao Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.Map">
            <summary>
            Material diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.MapUuid">
            <summary>
            The Uuid of the diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.AlphaMap">
            <summary>
            Material alpha map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.AlphaMapUuid">
            <summary>
            AlphaMap Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.EnvironmentMap">
            <summary>
            Material environment map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.EnvironmentMapUuid">
            <summary>
            Environment map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.LightMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.LightMapUuid">
            <summary>
            Light map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.SpecularMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshBasicMaterial.SpecularMapUuid">
            <summary>
            Specular map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.Map">
            <summary>
            Material diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.MapUuid">
            <summary>
            The Uuid of the diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.BumpMap">
            <summary>
            Material bump map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.BumpMapUuid">
            <summary>
            BumpMap Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.AlphaMap">
            <summary>
            Material alpha map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.AlphaMapUuid">
            <summary>
            AlphaMap Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.EnvironmentMap">
            <summary>
            Material environment map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshLambertMaterial.EnvironmentMapUuid">
            <summary>
            Environment map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.Map">
            <summary>
            Material diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.MapUuid">
            <summary>
            The Uuid of the diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.BumpMap">
            <summary>
            Material bump map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.BumpMapUuid">
            <summary>
            BumpMap Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.AlphaMap">
            <summary>
            Material alpha map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.AlphaMapUuid">
            <summary>
            AlphaMap Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.EnvironmentMap">
            <summary>
            Material environment map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshPhongMaterial.EnvironmentMapUuid">
            <summary>
            Environment map Uuid.
            </summary>
        </member>
        <member name="T:THREE.Materials.MeshStandardMaterial">
            <summary>
            Analogous to: https://github.com/mrdoob/three.js/blob/dev/src/materials/MeshStandardMaterial.js
            TODO: Add roughness and metalness maps.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.Color">
            <summary>
            Material diffuse color.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.Roughness">
            <summary>
            Material roughness.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.Metalness">
            <summary>
            Material metalness.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.Ambient">
            <summary>
            Material ambient color.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.Emissive">
            <summary>
            Material emissive color.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.AoMap">
            <summary>
            Material ao map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.AoMapUuid">
            <summary>
            ao Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.AlphaMap">
            <summary>
            Material alpha map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.AlphaMapUuid">
            <summary>
            AlphaMap Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.BumpMap">
            <summary>
            Material bump map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.BumpMapUuid">
            <summary>
            BumpMap Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.DisplacementMap">
            <summary>
            The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.DisplacementMapUuid">
            <summary>
            Displacement map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.EnvironmentMap">
            <summary>
            Material environment map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.EnvironmentMapUuid">
            <summary>
            Environment map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.EmissiveMap">
            <summary>
            Set emisssive (glow) map. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.EmissiveMapUuid">
            <summary>
            Emissive map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.LightMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.LightMapUuid">
            <summary>
            Light map Uuid.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.Map">
            <summary>
            Material diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.MapUuid">
            <summary>
            The Uuid of the diffuse map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.MetalnessMap">
            <summary>
            Material metalness map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.MetalnessMapUuid">
            <summary>
            The Uuid of the metalness map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.NormalMap">
            <summary>
            Material normal map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.NormalMapUuid">
            <summary>
            The Uuid of the normal map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.RoughnessMap">
            <summary>
            Material roughness map.
            </summary>
        </member>
        <member name="P:THREE.Materials.MeshStandardMaterial.RoughnessMapUuid">
            <summary>
            The Uuid of the roughness map.
            </summary>
        </member>
        <member name="M:THREE.Materials.MeshStandardMaterial.Default">
            <summary>
            Creates a MeshStandardMaterial with some default settings.
            </summary>
            <returns>An MeshStandardMaterial with default values.</returns>
        </member>
        <member name="M:THREE.Materials.MeshStandardMaterial.GetTextures">
            <summary>
            Returns material textures as a dictionary.
            </summary>
            <returns>Dictionary with the texture type as the key. For example, "AlphaMap" key will have a Texture that contains an Alpha Map image.</returns>
        </member>
        <member name="M:THREE.Materials.MeshStandardMaterial.Equals(THREE.Materials.MeshStandardMaterial)">
            <summary>
            Test to see if this material is equal to another.
            </summary>
            <param name="other">The material to test against.</param>
            <returns>True if the object is equal to this one. False, otherwise.</returns>
        </member>
        <member name="T:THREE.Materials.PointsMaterial">
            <summary>
            Analogous to https://github.com/mrdoob/three.js/blob/master/src/materials/PointsMaterial.js
            </summary>
        </member>
        <member name="P:THREE.Materials.PointsMaterial.Color">
            <summary>
            Material color.
            </summary>
        </member>
        <member name="P:THREE.Materials.PointsMaterial.Size">
            <summary>
            Point size.
            </summary>
        </member>
        <member name="P:THREE.Materials.PointsMaterial.SizeAttenuation">
            <summary>
            Size attenuation flag.
            </summary>
        </member>
        <member name="P:THREE.Materials.PointsMaterial.Map">
            <summary>
            The diffuse map texture.
            </summary>
        </member>
        <member name="P:THREE.Materials.PointsMaterial.MapUuid">
            <summary>
            Material diffuse color map.
            </summary>
        </member>
        <member name="T:THREE.Materials.IMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="T:THREE.Materials.Material">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.AlphaTest">
            <summary>
            Sets the alpha value to be used when running an alpha test. The material will not be renderered if the opacity is lower than this value.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.ClipIntersections">
            <summary>
            Changes the behavior of clipping planes so that only their intersection is clipped, rather than their union. 
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.ClippingPlanes">
            <summary>
            User-defined clipping planes specified as THREE.Plane objects in world space. These planes apply to the objects this material is attached to. Points in space whose signed distance to the plane is negative are clipped (not rendered).
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.ClipShadows">
            <summary>
            Defines whether to clip shadows according to the clipping planes specified on this material. 
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.ColorWrite">
            <summary>
            Whether to render the material's color. This can be used in conjunction with a mesh's 
            renderOrder property to create invisible objects that occlude other objects. 
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.DepthTest">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.DepthWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Dithering">
            <summary>
            Whether to apply dithering to the color to remove the appearance of banding.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Fog">
            <summary>
            Whether the material is affected by fog. Default is true.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Lights">
            <summary>
            Whether the material is affected by lights. Default is true.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.FlatShading">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Transparent">
            <summary>
            Defines whether this material is transparent. This has an effect on rendering as transparent objects need special treatment and are rendered after non-transparent objects.
            When set to true, the extent to which the material is transparent is controlled by setting it's opacity property. Default is false.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Visible">
            <summary>
            Defines whether this material is visible. Default is true.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Blending">
            <summary>
            Which blending to use when displaying objects with this material.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.VertexColors">
            <summary>
            Defines whether vertex coloring is used.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Side">
            <summary>
            Defines which side of faces will be rendered - front, back or both.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Opacity">
            <summary>
            Float in the range of 0.0 - 1.0 indicating how transparent the material is. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.
            If the material's transparent property is not set to true, the material will remain fully opaque and this value will only affect its color. 
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Overdraw">
            <summary>
            Amount of triangle expansion at draw time. This is a workaround for cases when gaps appear between triangles when using CanvasRenderer. 0.5 tends to give good results across browsers.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.Precision">
            <summary>
            Override the renderer's default precision for this material. Can be "highp", "mediump" or "lowp".
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.PremultipliedAlpha">
            <summary>
            Whether to premultiply the alpha (transparency) value.
            </summary>
        </member>
        <member name="P:THREE.Materials.Material.UserData">
            <summary>
            An object that can be used to store custom data about the Material.
            </summary>
        </member>
        <member name="M:THREE.Materials.Material.Equals(THREE.Materials.Material)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:THREE.Materials.MaterialCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:THREE.Materials.MaterialCollection.AddIfNew(THREE.Materials.Material)">
            <summary>
            Add a geometry to this collection if it does not already exist.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:THREE.Math.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Math.Color.R">
            <summary>
            Red channel, 0-256.
            </summary>
        </member>
        <member name="P:THREE.Math.Color.G">
            <summary>
            Green channel, 0-256.
            </summary>
        </member>
        <member name="P:THREE.Math.Color.B">
            <summary>
            Blue channel, 0-256.
            </summary>
        </member>
        <member name="M:THREE.Math.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a color from r,g,b bytes.
            </summary>
            <param name="r">Red channel.</param>
            <param name="g">Green channel.</param>
            <param name="b">Blue channel.</param>
        </member>
        <member name="M:THREE.Math.Color.ToInt(System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert color to 8-bit integer.
            </summary>
            <returns>An int representation of three byte channels.</returns>
        </member>
        <member name="M:THREE.Math.Color.ToInt">
            <summary>
            Convert this color to 8-bit integer.
            </summary>
            <returns>An int representation of the color.</returns>
        </member>
        <member name="P:THREE.Math.Euler.X">
            <summary>
            The x value of the Euler.
            </summary>
        </member>
        <member name="P:THREE.Math.Euler.Y">
            <summary>
            The y value of the Euler.
            </summary>
        </member>
        <member name="P:THREE.Math.Euler.Z">
            <summary>
            The z value of the Euler.
            </summary>
        </member>
        <member name="T:THREE.Math.Matrix4">
            <summary>
            A class representing a 4x4 matrix.
            Analogous to: https://threejs.org/docs/index.html#api/math/Matrix4
            JS Source: https://github.com/mrdoob/three.js/blob/master/src/math/Matrix4.js
            </summary>
        </member>
        <member name="P:THREE.Math.Matrix4.Elements">
            <summary>
            A column-major list of matrix values. 
            </summary>
        </member>
        <member name="M:THREE.Math.Matrix4.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:THREE.Math.Matrix4.Identity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:THREE.Math.Matrix4.SetPosition(THREE.Math.Vector3)">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="T:THREE.Math.Quaternion">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Math.Quaternion.X">
            <summary>
            The x value of the Quaternion.
            </summary>
        </member>
        <member name="P:THREE.Math.Quaternion.Y">
            <summary>
            The y value of the Quaternion.
            </summary>
        </member>
        <member name="P:THREE.Math.Quaternion.Z">
            <summary>
            The z value of the Quaternion.
            </summary>
        </member>
        <member name="P:THREE.Math.Quaternion.W">
            <summary>
            The z value of the Quaternion.
            </summary>
        </member>
        <member name="T:THREE.Math.Vector3">
            <summary>
            Class representing a 3D vector.
            Analogous to: https://threejs.org/docs/index.html#api/math/Vector3
            JS Source: https://github.com/mrdoob/three.js/blob/master/src/math/Vector3.js
            </summary>
        </member>
        <member name="P:THREE.Math.Vector3.X">
            <summary>
            The x value of the vector.
            </summary>
        </member>
        <member name="P:THREE.Math.Vector3.Y">
            <summary>
            The y value of the vector.
            </summary>
        </member>
        <member name="P:THREE.Math.Vector3.Z">
            <summary>
            The z value of the vector.
            </summary>
        </member>
        <member name="M:THREE.Math.Vector3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:THREE.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Extended constructor that takes three components of this vector.
            </summary>
            <param name="x">The x component of this vector.</param>
            <param name="y">The y component of this vector.</param>
            <param name="z">The z component of this vector.</param>
        </member>
        <member name="M:THREE.Math.Vector3.ToArray">
            <summary>
            An array representation of this vector.
            </summary>
            <returns>An array where x is index 0, y is index 1, and z is index 2.</returns>
        </member>
        <member name="T:THREE.Objects.Group">
            <summary>
            Class based on Object3D for grouping objects. Analogous to https://threejs.org/docs/index.html#api/objects/Group
            </summary>
        </member>
        <member name="T:THREE.Objects.Line">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Objects.Line.Geometry">
            <summary>
            The geometry associated with this Mesh.
            </summary>
        </member>
        <member name="P:THREE.Objects.Line.GeometryUuid">
            <summary>
            Uuid of this geometry.
            </summary>
        </member>
        <member name="P:THREE.Objects.Line.Material">
            <summary>
            The material associated with this mesh.
            </summary>
        </member>
        <member name="P:THREE.Objects.Line.MaterialUuid">
            <summary>
            This object's material Uuid.
            </summary>
        </member>
        <member name="M:THREE.Objects.Line.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:THREE.Objects.Mesh">
            <summary>
            
            </summary>
        </member>
        <member name="P:THREE.Objects.Mesh.Geometry">
            <summary>
            The geometry associated with this Mesh.
            </summary>
        </member>
        <member name="P:THREE.Objects.Mesh.GeometryUuid">
            <summary>
            Uuid of this geometry.
            </summary>
        </member>
        <member name="P:THREE.Objects.Mesh.Material">
            <summary>
            The material associated with this mesh.
            </summary>
        </member>
        <member name="P:THREE.Objects.Mesh.MaterialUuid">
            <summary>
            This object's material Uuid.
            </summary>
        </member>
        <member name="P:THREE.Objects.Points.Geometry">
            <summary>
            The geometry associated with this Mesh.
            </summary>
        </member>
        <member name="P:THREE.Objects.Points.GeometryUuid">
            <summary>
            Uuid of this geometry.
            </summary>
        </member>
        <member name="P:THREE.Objects.Points.Material">
            <summary>
            The material associated with this mesh.
            </summary>
        </member>
        <member name="P:THREE.Objects.Points.MaterialUuid">
            <summary>
            This object's material Uuid.
            </summary>
        </member>
        <member name="T:THREE.Metadata">
            <summary>
            Basic file metadata
            </summary>
            <remarks>
            This is used by scene and camera objects to define which format they are written in. 
            </remarks>
        </member>
        <member name="P:THREE.Metadata.Version">
            <summary>
            File version.
            </summary>
        </member>
        <member name="P:THREE.Metadata.Type">
            <summary>
            File type.
            </summary>
        </member>
        <member name="P:THREE.Metadata.Generator">
            <summary>
            The application which generated this data.
            </summary>
        </member>
        <member name="T:THREE.Scene">
            <summary>
            Scenes allow you to set up what and where is to be rendered by three.js. This is where you place objects, lights and cameras.
            Analogous to https://threejs.org/docs/index.html#api/scenes/Scene
            </summary>
        </member>
        <member name="P:THREE.Scene.Background">
            <summary>
            Background color for the scene.
            </summary>
        </member>
        <member name="M:THREE.Scene.ToJSON(System.Boolean)">
            <summary>
            Converts this Scene to a compatible JSON format.
            </summary>
            <returns>JSON String.</returns>
        </member>
        <member name="T:THREE.SceneSerializationAdaptor">
            <summary>
            Internal class to format Scene object for the Three.js Object Scene Format:
            https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4
            </summary>
        </member>
        <member name="M:THREE.SceneSerializationAdaptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:THREE.Textures.Image.Uuid">
            <summary>
            Object Id.
            </summary>
        </member>
        <member name="P:THREE.Textures.Image.Url">
            <summary>
            Image url. This can be the path to the image resource (.jpg, .png, etc), or a base64 encoded asset.
            </summary>
        </member>
        <member name="P:THREE.Textures.Image.OriginalPath">
            <summary>
            Image path.
            </summary>
        </member>
        <member name="P:THREE.Textures.Image.Exists">
            <summary>
            Image exists flag.
            </summary>
        </member>
        <member name="M:THREE.Textures.Image.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:THREE.Textures.Image.GetDataURL(System.String)">
            <summary>
            Encode image to base64.
            TODO: consider removing this to the example application.
            </summary>
            <param name="imgFile"></param>
            <returns></returns>
        </member>
        <member name="M:THREE.Textures.ImageCollection.AddIfNew(THREE.Textures.Image)">
            <summary>
            Add an Image to this collection if it does not already exist.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:THREE.Textures.Texture.Uuid">
            <summary>
            Object Id.
            </summary>
        </member>
        <member name="P:THREE.Textures.Texture.Image">
            <summary>
            Image associated with this texture.
            </summary>
        </member>
        <member name="P:THREE.Textures.Texture.ImageUuid">
            <summary>
            URL of the image.
            </summary>
        </member>
        <member name="P:THREE.Textures.Texture.Mapping">
            <summary>
            Texture mapping.
            </summary>
        </member>
        <member name="P:THREE.Textures.Texture.Wrap">
            <summary>
            Texture wrapping.
            </summary>
        </member>
        <member name="P:THREE.Textures.Texture.Repeat">
            <summary>
            Texture repetition.
            </summary>
        </member>
        <member name="M:THREE.Textures.Texture.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:THREE.Textures.TextureCollection.AddIfNew(THREE.Textures.Texture)">
            <summary>
            Add a Texture to this collection if it does not already exist.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:THREE.Utility.SerializationAdaptor.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="M:THREE.Utility.Utilities.EncodeFloat(System.Single)">
            <summary>
            Encode a float to an int.
            </summary>
            <param name="x">The float to encode.</param>
            <returns>An encoded float.</returns>
        </member>
    </members>
</doc>
